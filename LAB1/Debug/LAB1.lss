
LAB1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000003a6  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800110  00800110  0000044a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a29  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c7  00000000  00000000  00000f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000522  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00001c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  00001d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e8  00000000  00000000  000021ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000025b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__vector_3>
  10:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  9e:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <startRace>:
int player1 = 0;
int player2 = 0;
int result;
int raceStarted = 0;
//******************************************************************************
void startRace() {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	for (int i = 5; i >= 0; i--) {
  aa:	c5 e0       	ldi	r28, 0x05	; 5
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	0d c0       	rjmp	.+26     	; 0xca <startRace+0x24>
		displayref(i);
  b0:	8c 2f       	mov	r24, r28
  b2:	0e 94 ad 01 	call	0x35a	; 0x35a <displayref>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	83 ed       	ldi	r24, 0xD3	; 211
  ba:	90 e3       	ldi	r25, 0x30	; 48
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <startRace+0x16>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <startRace+0x20>
  c6:	00 00       	nop
int player2 = 0;
int result;
int raceStarted = 0;
//******************************************************************************
void startRace() {
	for (int i = 5; i >= 0; i--) {
  c8:	21 97       	sbiw	r28, 0x01	; 1
  ca:	dd 23       	and	r29, r29
  cc:	8c f7       	brge	.-30     	; 0xb0 <startRace+0xa>
		displayref(i);
		_delay_ms(1000);
	}
	PORTD = 0b11111111; // Apagar display después de conteo
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8b b9       	out	0x0b, r24	; 11
	raceStarted = 1; // Iniciar la carrera
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
  da:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	player1 = 0;
  de:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <player1+0x1>
  e2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <player1>
	player2 = 0;
  e6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <player2+0x1>
  ea:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <player2>
	result = 0;
  ee:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <result+0x1>
  f2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <result>
	PORTB &= 0xE1; // Limpiar los bits PB1-PB4
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	81 7e       	andi	r24, 0xE1	; 225
  fa:	85 b9       	out	0x05, r24	; 5
	PORTC &= 0xF0; // Limpiar los bits PC0-PC3
  fc:	88 b1       	in	r24, 0x08	; 8
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	88 b9       	out	0x08, r24	; 8
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <setup>:

void setup(void) {
	cli();
 108:	f8 94       	cli
	
	DDRB = 0b11011110;   // PB0 como entrada, PB1-PB4 como salidas
 10a:	8e ed       	ldi	r24, 0xDE	; 222
 10c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00100001;  // Pull Up en PB0 y PB5
 10e:	81 e2       	ldi	r24, 0x21	; 33
 110:	85 b9       	out	0x05, r24	; 5
	
	DDRD = 0b11111111;   // Salida de DISPLAY
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b11111111;  // DISPLAY apagado
 116:	8b b9       	out	0x0b, r24	; 11
	
	DDRC = 0b00001111;   // PC0-PC3 como salidas, PC4-PC6 como entradas
 118:	8f e0       	ldi	r24, 0x0F	; 15
 11a:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b11110000;  // Pull Up en PC4-PC6
 11c:	80 ef       	ldi	r24, 0xF0	; 240
 11e:	88 b9       	out	0x08, r24	; 8
	
	PCMSK1 |= (1<<PCINT12)|(1<<PCINT13)|(1<<PCINT14); // PCINT12 (PC4), PCINT13 (PC5), PCINT14 (PC6)
 120:	ec e6       	ldi	r30, 0x6C	; 108
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 67       	ori	r24, 0x70	; 112
 128:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1);  // Mascara de interrupción para PCINT[14:8]
 12a:	e8 e6       	ldi	r30, 0x68	; 104
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	82 60       	ori	r24, 0x02	; 2
 132:	80 83       	st	Z, r24
	
	PCICR |= (1 << PCIE0); // Habilitar interrupciones de PCINT[7:0]
 134:	80 81       	ld	r24, Z
 136:	81 60       	ori	r24, 0x01	; 1
 138:	80 83       	st	Z, r24
	PCMSK0 |=  (1 << PCINT5) | (1 << PCINT0); // Habilitar interrupción en  PB5 y PB0
 13a:	ab e6       	ldi	r26, 0x6B	; 107
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	8c 91       	ld	r24, X
 140:	81 62       	ori	r24, 0x21	; 33
 142:	8c 93       	st	X, r24
	
	PCICR |= (1<<PCIE0); // Mascara de interrupción
 144:	80 81       	ld	r24, Z
 146:	81 60       	ori	r24, 0x01	; 1
 148:	80 83       	st	Z, r24
	UCSR0B = 0;
 14a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	sei(); // Activar interrupciones
 14e:	78 94       	sei
 150:	08 95       	ret

00000152 <checkWinner>:
     }
    
}

void checkWinner() {
	if (result != 0) {
 152:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <result>
 156:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <result+0x1>
 15a:	89 2b       	or	r24, r25
 15c:	41 f0       	breq	.+16     	; 0x16e <checkWinner+0x1c>
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	9c e9       	ldi	r25, 0x9C	; 156
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <checkWinner+0x10>
 166:	00 c0       	rjmp	.+0      	; 0x168 <checkWinner+0x16>
 168:	00 00       	nop
		_delay_ms(10);
		PORTD = 0x0F;     // Apagar el display después de mostrar el ganador
 16a:	8f e0       	ldi	r24, 0x0F	; 15
 16c:	8b b9       	out	0x0b, r24	; 11
	}

	switch (result) {
 16e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <result>
 172:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <result+0x1>
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	91 05       	cpc	r25, r1
 17a:	19 f0       	breq	.+6      	; 0x182 <checkWinner+0x30>
 17c:	02 97       	sbiw	r24, 0x02	; 2
 17e:	49 f0       	breq	.+18     	; 0x192 <checkWinner+0x40>
 180:	08 95       	ret
		case 1:
		displayref(1);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 ad 01 	call	0x35a	; 0x35a <displayref>
		count = 0;
 188:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <count+0x1>
 18c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <count>
		break;
 190:	08 95       	ret
		
		case 2:
		displayref(2);
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 ad 01 	call	0x35a	; 0x35a <displayref>
		count = 0;
 198:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <count+0x1>
 19c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <count>
 1a0:	08 95       	ret

000001a2 <main>:
	sei(); // Activar interrupciones
}

int main(void)
{
	setup();
 1a2:	0e 94 84 00 	call	0x108	; 0x108 <setup>
     while (1) {
	     checkWinner();
 1a6:	0e 94 a9 00 	call	0x152	; 0x152 <checkWinner>
 1aa:	fd cf       	rjmp	.-6      	; 0x1a6 <main+0x4>

000001ac <updateLeds>:
		count = 0;
		break;
	}
}

void updateLeds(uint8_t player, volatile uint8_t *port, uint8_t shift) {
 1ac:	fb 01       	movw	r30, r22
	uint8_t mask = 0x0F << shift;
 1ae:	64 2f       	mov	r22, r20
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	2f e0       	ldi	r18, 0x0F	; 15
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <updateLeds+0x10>
 1b8:	22 0f       	add	r18, r18
 1ba:	33 1f       	adc	r19, r19
 1bc:	4a 95       	dec	r20
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <updateLeds+0xc>
	*port &= ~mask; // Apagar los LEDs correspondientes
 1c0:	90 81       	ld	r25, Z
 1c2:	20 95       	com	r18
 1c4:	29 23       	and	r18, r25
 1c6:	20 83       	st	Z, r18
	if (player > 0 && player <= 4) {
 1c8:	9f ef       	ldi	r25, 0xFF	; 255
 1ca:	98 0f       	add	r25, r24
 1cc:	94 30       	cpi	r25, 0x04	; 4
 1ce:	80 f4       	brcc	.+32     	; 0x1f0 <updateLeds+0x44>
		*port |= (1 << (player - 1 + shift)); // Encender el LED específico
 1d0:	40 81       	ld	r20, Z
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	86 0f       	add	r24, r22
 1d8:	97 1f       	adc	r25, r23
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	b9 01       	movw	r22, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <updateLeds+0x3a>
 1e2:	66 0f       	add	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	8a 95       	dec	r24
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <updateLeds+0x36>
 1ea:	cb 01       	movw	r24, r22
 1ec:	84 2b       	or	r24, r20
 1ee:	80 83       	st	Z, r24
 1f0:	08 95       	ret

000001f2 <__vector_4>:
	}
}

ISR(PCINT1_vect) {
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	if ((PINC & (1<<PINC4)) == 0) {
 214:	34 99       	sbic	0x06, 4	; 6
 216:	10 c0       	rjmp	.+32     	; 0x238 <__vector_4+0x46>
		count++;
 218:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <count>
 21c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <count+0x1>
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <count+0x1>
 226:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <count>
		if (count > 1) {
 22a:	02 97       	sbiw	r24, 0x02	; 2
 22c:	1c f0       	brlt	.+6      	; 0x234 <__vector_4+0x42>
			startRace(); // Reiniciar la carrera si ya ha iniciado
 22e:	0e 94 53 00 	call	0xa6	; 0xa6 <startRace>
 232:	02 c0       	rjmp	.+4      	; 0x238 <__vector_4+0x46>
			} else {
			startRace(); // Iniciar la carrera si no ha iniciado
 234:	0e 94 53 00 	call	0xa6	; 0xa6 <startRace>
		}
	}
	
	 if ((PINC & (1<<PINC5)) == 0 && raceStarted) {
 238:	35 99       	sbic	0x06, 5	; 6
 23a:	2a c0       	rjmp	.+84     	; 0x290 <__vector_4+0x9e>
 23c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 240:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 244:	89 2b       	or	r24, r25
 246:	21 f1       	breq	.+72     	; 0x290 <__vector_4+0x9e>
		 if (result != 2) { // Evitar incrementar si player2 ha ganado
 248:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <result>
 24c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <result+0x1>
 250:	02 97       	sbiw	r24, 0x02	; 2
 252:	f1 f0       	breq	.+60     	; 0x290 <__vector_4+0x9e>
			 player1++;
 254:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <player1>
 258:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <player1+0x1>
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <player1+0x1>
 262:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <player1>
			 if (player1 > 4) {
 266:	05 97       	sbiw	r24, 0x05	; 5
 268:	64 f0       	brlt	.+24     	; 0x282 <__vector_4+0x90>
				 player1 = 4;   // Limitar el valor máximo a 4
 26a:	84 e0       	ldi	r24, 0x04	; 4
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <player1+0x1>
 272:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <player1>
				 result = 1;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <result+0x1>
 27e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <result>
			 }
			 updateLeds(player1, &PORTB, 1); // Actualizar PB1-PB4 con el valor de player1
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	65 e2       	ldi	r22, 0x25	; 37
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <player1>
 28c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <updateLeds>
		 }
	 }
}
 290:	ff 91       	pop	r31
 292:	ef 91       	pop	r30
 294:	bf 91       	pop	r27
 296:	af 91       	pop	r26
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	7f 91       	pop	r23
 29e:	6f 91       	pop	r22
 2a0:	5f 91       	pop	r21
 2a2:	4f 91       	pop	r20
 2a4:	3f 91       	pop	r19
 2a6:	2f 91       	pop	r18
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <__vector_3>:

ISR(PCINT0_vect) {
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
 2bc:	2f 93       	push	r18
 2be:	3f 93       	push	r19
 2c0:	4f 93       	push	r20
 2c2:	5f 93       	push	r21
 2c4:	6f 93       	push	r22
 2c6:	7f 93       	push	r23
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
 2cc:	af 93       	push	r26
 2ce:	bf 93       	push	r27
 2d0:	ef 93       	push	r30
 2d2:	ff 93       	push	r31
	if ((PINB & (1<<PINB0)) == 0 && raceStarted) {
 2d4:	18 99       	sbic	0x03, 0	; 3
 2d6:	30 c0       	rjmp	.+96     	; 0x338 <__vector_3+0x86>
 2d8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 2dc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 2e0:	89 2b       	or	r24, r25
 2e2:	51 f1       	breq	.+84     	; 0x338 <__vector_3+0x86>
 2e4:	8f e1       	ldi	r24, 0x1F	; 31
 2e6:	9e e4       	ldi	r25, 0x4E	; 78
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <__vector_3+0x36>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <__vector_3+0x3c>
 2ee:	00 00       	nop
		_delay_ms(5);
		if (result != 1) { // Evitar incrementar si player1 ha ganado
 2f0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <result>
 2f4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <result+0x1>
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f0       	breq	.+60     	; 0x338 <__vector_3+0x86>
			player2++;
 2fc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <player2>
 300:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <player2+0x1>
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <player2+0x1>
 30a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <player2>
			if (player2 > 4) {
 30e:	05 97       	sbiw	r24, 0x05	; 5
 310:	64 f0       	brlt	.+24     	; 0x32a <__vector_3+0x78>
				player2 = 4;   // Limitar el valor máximo a 4
 312:	84 e0       	ldi	r24, 0x04	; 4
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <player2+0x1>
 31a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <player2>
				result = 2;
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <result+0x1>
 326:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <result>
			}
			updateLeds(player2, &PORTC, 0); // Actualizar PC0-PC3 con el valor de player2
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	68 e2       	ldi	r22, 0x28	; 40
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <player2>
 334:	0e 94 d6 00 	call	0x1ac	; 0x1ac <updateLeds>
		}
	}
 338:	ff 91       	pop	r31
 33a:	ef 91       	pop	r30
 33c:	bf 91       	pop	r27
 33e:	af 91       	pop	r26
 340:	9f 91       	pop	r25
 342:	8f 91       	pop	r24
 344:	7f 91       	pop	r23
 346:	6f 91       	pop	r22
 348:	5f 91       	pop	r21
 34a:	4f 91       	pop	r20
 34c:	3f 91       	pop	r19
 34e:	2f 91       	pop	r18
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <displayref>:
 * Created: 23/01/2025 19:56:28
 *  Author: alane
 */ 
#include "SEGLIB.h"

void displayref(uint8_t nums){
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	60 97       	sbiw	r28, 0x10	; 16
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
	const uint8_t display[]= {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78,  0x00, 0x10, 0x08, 0x03, 0x46, 0x21, 0x06, 0x0E};
 36e:	90 e1       	ldi	r25, 0x10	; 16
 370:	e0 e0       	ldi	r30, 0x00	; 0
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	de 01       	movw	r26, r28
 376:	11 96       	adiw	r26, 0x01	; 1
 378:	01 90       	ld	r0, Z+
 37a:	0d 92       	st	X+, r0
 37c:	9a 95       	dec	r25
 37e:	e1 f7       	brne	.-8      	; 0x378 <displayref+0x1e>
	PORTD = display[nums];
 380:	e1 e0       	ldi	r30, 0x01	; 1
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	ec 0f       	add	r30, r28
 386:	fd 1f       	adc	r31, r29
 388:	e8 0f       	add	r30, r24
 38a:	f1 1d       	adc	r31, r1
 38c:	80 81       	ld	r24, Z
 38e:	8b b9       	out	0x0b, r24	; 11
 390:	60 96       	adiw	r28, 0x10	; 16
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	f8 94       	cli
 396:	de bf       	out	0x3e, r29	; 62
 398:	0f be       	out	0x3f, r0	; 63
 39a:	cd bf       	out	0x3d, r28	; 61
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
