
LAB1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001e0  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000878  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000772  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f9  00000000  00000000  00001336  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003de  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ce  00000000  00000000  00001bea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 91 00 	call	0x122	; 0x122 <main>
  9e:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <startRace>:
void setup(void);
void startRace(void);

int count = 0;

void startRace() {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	for (int i = 5; i >= 0; i--) {
  aa:	c5 e0       	ldi	r28, 0x05	; 5
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	0d c0       	rjmp	.+26     	; 0xca <startRace+0x24>
		displayref(i);
  b0:	8c 2f       	mov	r24, r28
  b2:	0e 94 ca 00 	call	0x194	; 0x194 <displayref>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	83 ed       	ldi	r24, 0xD3	; 211
  ba:	90 e3       	ldi	r25, 0x30	; 48
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <startRace+0x16>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <startRace+0x20>
  c6:	00 00       	nop
void startRace(void);

int count = 0;

void startRace() {
	for (int i = 5; i >= 0; i--) {
  c8:	21 97       	sbiw	r28, 0x01	; 1
  ca:	dd 23       	and	r29, r29
  cc:	8c f7       	brge	.-30     	; 0xb0 <startRace+0xa>
		displayref(i);
		_delay_ms(1000);
	}
	PORTD = 0b11111111; // Apagar display después de conteo
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8b b9       	out	0x0b, r24	; 11
}
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <setup>:

void setup(void) {
	cli();
  d8:	f8 94       	cli
	
	DDRB = 0b11011110;   // PB0 como entrada, PB1-PB4 como salidas
  da:	8e ed       	ldi	r24, 0xDE	; 222
  dc:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00100001;  // Pull Up en PB0 y PB5
  de:	81 e2       	ldi	r24, 0x21	; 33
  e0:	85 b9       	out	0x05, r24	; 5
	
	DDRD = 0b11111111;   // Salida de DISPLAY
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b11111111;  // DISPLAY apagado
  e6:	8b b9       	out	0x0b, r24	; 11
	
	DDRC = 0b00001111;   // PC0-PC3 como salidas, PC4-PC6 como entradas
  e8:	8f e0       	ldi	r24, 0x0F	; 15
  ea:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b11110000;  // Pull Up en PC4-PC6
  ec:	80 ef       	ldi	r24, 0xF0	; 240
  ee:	88 b9       	out	0x08, r24	; 8
	
	PCMSK1 |= (1<<PCINT12)|(1<<PCINT13)|(1<<PCINT14); // PCINT12 (PC4), PCINT13 (PC5), PCINT14 (PC6)
  f0:	ec e6       	ldi	r30, 0x6C	; 108
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	80 67       	ori	r24, 0x70	; 112
  f8:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1);  // Mascara de interrupción para PCINT[14:8]
  fa:	e8 e6       	ldi	r30, 0x68	; 104
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	80 83       	st	Z, r24
	
	PCICR |= (1 << PCIE0); // Habilitar interrupciones de PCINT[7:0]
 104:	80 81       	ld	r24, Z
 106:	81 60       	ori	r24, 0x01	; 1
 108:	80 83       	st	Z, r24
	PCMSK0 |=  (1 << PCINT5) | (1 << PCINT0); // Habilitar interrupción en  PB5 y PB0
 10a:	ab e6       	ldi	r26, 0x6B	; 107
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	8c 91       	ld	r24, X
 110:	81 62       	ori	r24, 0x21	; 33
 112:	8c 93       	st	X, r24
	
	PCICR |= (1<<PCIE0); // Mascara de interrupción
 114:	80 81       	ld	r24, Z
 116:	81 60       	ori	r24, 0x01	; 1
 118:	80 83       	st	Z, r24
	UCSR0B = 0;
 11a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	sei(); // Activar interrupciones
 11e:	78 94       	sei
 120:	08 95       	ret

00000122 <main>:
}

int main(void)
{
	setup();
 122:	0e 94 6c 00 	call	0xd8	; 0xd8 <setup>
     while (1) {
	     PORTD = 0b11111111;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	fd cf       	rjmp	.-6      	; 0x126 <main+0x4>

0000012c <__vector_4>:
     }
    
}

ISR(PCINT1_vect) {
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	2f 93       	push	r18
 138:	3f 93       	push	r19
 13a:	4f 93       	push	r20
 13c:	5f 93       	push	r21
 13e:	6f 93       	push	r22
 140:	7f 93       	push	r23
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	af 93       	push	r26
 148:	bf 93       	push	r27
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
	if ((PINC & (1<<PINC4)) == 0) {
 14e:	34 99       	sbic	0x06, 4	; 6
 150:	10 c0       	rjmp	.+32     	; 0x172 <__vector_4+0x46>
		count++;
 152:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 156:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 160:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		if (count > 1) {
 164:	02 97       	sbiw	r24, 0x02	; 2
 166:	1c f0       	brlt	.+6      	; 0x16e <__vector_4+0x42>
			startRace(); // Reiniciar la carrera si ya ha iniciado
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <startRace>
 16c:	02 c0       	rjmp	.+4      	; 0x172 <__vector_4+0x46>
			} else {
			startRace(); // Iniciar la carrera si no ha iniciado
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <startRace>
		}
	}
}
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	7f 91       	pop	r23
 180:	6f 91       	pop	r22
 182:	5f 91       	pop	r21
 184:	4f 91       	pop	r20
 186:	3f 91       	pop	r19
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <displayref>:
 * Created: 23/01/2025 19:56:28
 *  Author: alane
 */ 
#include "SEGLIB.h"

void displayref(uint8_t nums){
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	60 97       	sbiw	r28, 0x10	; 16
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	de bf       	out	0x3e, r29	; 62
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	cd bf       	out	0x3d, r28	; 61
	const uint8_t display[]= {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78,  0x00, 0x10, 0x08, 0x03, 0x46, 0x21, 0x06, 0x0E};
 1a8:	90 e1       	ldi	r25, 0x10	; 16
 1aa:	e0 e0       	ldi	r30, 0x00	; 0
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	de 01       	movw	r26, r28
 1b0:	11 96       	adiw	r26, 0x01	; 1
 1b2:	01 90       	ld	r0, Z+
 1b4:	0d 92       	st	X+, r0
 1b6:	9a 95       	dec	r25
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <displayref+0x1e>
	PORTD = display[nums];
 1ba:	e1 e0       	ldi	r30, 0x01	; 1
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ec 0f       	add	r30, r28
 1c0:	fd 1f       	adc	r31, r29
 1c2:	e8 0f       	add	r30, r24
 1c4:	f1 1d       	adc	r31, r1
 1c6:	80 81       	ld	r24, Z
 1c8:	8b b9       	out	0x0b, r24	; 11
 1ca:	60 96       	adiw	r28, 0x10	; 16
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	f8 94       	cli
 1d0:	de bf       	out	0x3e, r29	; 62
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	cd bf       	out	0x3d, r28	; 61
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
